/*
Deployment script for AcademicReferral

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AcademicReferral"
:setvar DefaultFilePrefix "AcademicReferral"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[CourseStudent].[CourseNumber] on table [dbo].[CourseStudent] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[CourseStudent])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Altering [dbo].[CourseStudent]...';


GO
ALTER TABLE [dbo].[CourseStudent]
    ADD [CourseNumber] VARCHAR (20) NOT NULL;


GO
PRINT N'Creating [dbo].[AddStudent]...';


GO
CREATE PROCEDURE [AddStudent]
	@StudentId CHAR(6),
	@FirstName NVARCHAR(30),
	@LastName NVARCHAR(30),
	@CourseNumber VARCHAR(20),
	@Major VARCHAR(10),
	@SemesterYear SMALLINT,
	@SemesterTerm CHAR(2)
AS
BEGIN

	IF (EXISTS(
		SELECT 1 
		FROM 
			Students s
		WHERE 
			s.StudentId = @StudentId
	))
		BEGIN
			UPDATE Students
			SET FirstName = @FirstName, LastName = @LastName,
			Major = @Major
			WHERE StudentId = @StudentId
		END

	IF (EXISTS(
		SELECT 1 
		FROM 
			CourseStudent cs
		WHERE 
			cs.StudentId = @StudentId
	))
		BEGIN
			UPDATE CourseStudent
			SET CourseNumber = @CourseNumber
			WHERE StudentId = @StudentId;
		END
	--IF (EXISTS(
	--	SELECT 1 
	--	FROM 
	--		Courses c
	--	WHERE 
	--		c.CourseNumber = @CourseNumber AND
	--		c.SemesterTerm = @SemesterTerm AND
	--		c.SemesterYear = @SemesterYear
	--))
	--	BEGIN
	--		UPDATE Courses
	--		SET 
	--			c.CourseNumber = @CourseNumber,
	--			c.SemesterTerm = @SemesterTerm,
	--			c.SemesterYear = @SemesterYear
	--		WHERE c.CourseNumber
	--	END
	
	--INSERT INTO Students
	--(FirstName, LastName, CourseGuid, Major, SemesterYear, SemesterTerm)

	SELECT
		s.StudentId,
		s.FirstName,
		s.LastName,
		s.Major,
		c.CourseGuid,
		c.SemesterYear,
		c.SemesterTerm
	FROM Students s
		INNER JOIN CourseStudent cs ON cs.StudentId = s.StudentId
		INNER JOIN Courses c ON c.CourseGuid = cs.CourseGuid

END
GO
PRINT N'Creating [dbo].[FindStudentById]...';


GO
CREATE PROCEDURE [FindStudentById]
	@StudentId CHAR(6)
AS
BEGIN
	SELECT 
		s.StudentId,
		s.FirstName,
		s.LastName,
		s.Major
	FROM Students s
	WHERE
		s.StudentId = @StudentId
END
GO
PRINT N'Creating [dbo].[FindStudentByLastName]...';


GO
CREATE PROCEDURE [FindStudentByLastName]
	@LastName NVARCHAR(30)
AS
BEGIN
	SELECT
		s.StudentId,
		s.LastName,
		s.FirstName,
		s.Major
	FROM 
		Students s
	WHERE
		s.LastName = @LastName
END
GO
PRINT N'Update complete.';


GO
