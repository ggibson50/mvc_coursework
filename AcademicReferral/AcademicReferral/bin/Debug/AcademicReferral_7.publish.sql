/*
Deployment script for AcademicReferral

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AcademicReferral"
:setvar DefaultFilePrefix "AcademicReferral"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[CourseStudent].[CourseNumber] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[CourseStudent])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Altering [dbo].[CourseStudent]...';


GO
ALTER TABLE [dbo].[CourseStudent] DROP COLUMN [CourseNumber];


GO
PRINT N'Altering [dbo].[AddStudent]...';


GO
ALTER PROCEDURE [AddStudent]
	@StudentId CHAR(6),
	@FirstName NVARCHAR(30),
	@LastName NVARCHAR(30),
	@CourseNumber VARCHAR(20),
	@Major VARCHAR(10),
	@SemesterYear SMALLINT,
	@SemesterTerm CHAR(2)
AS
BEGIN

	DECLARE @CourseGuid UNIQUEIDENTIFIER = (
		SELECT c.CourseGuid
		FROM Courses c
		WHERE 
			c.CourseNumber = @CourseNumber AND
			c.SemesterYear = @SemesterYear AND
			c.SemesterTerm = @SemesterTerm
	);

	IF (EXISTS(
		SELECT 1 
		FROM Students s
		WHERE s.StudentId = @StudentId
	))
		BEGIN
			UPDATE Students
			SET FirstName = @FirstName, LastName = @LastName,
			Major = @Major
			WHERE StudentId = @StudentId
		END
	ELSE
		BEGIN
			INSERT INTO Students
				(FirstName, LastName, Major)
			VALUES
				(@FirstName, @LastName, @Major)
		END

	IF (NOT EXISTS(
		SELECT 1 FROM CourseStudent cs WHERE cs.StudentId = @StudentId
	))
		BEGIN
			INSERT INTO CourseStudent 
				(CourseGuid, StudentId)
			VALUES
				(@CourseGuid, @StudentId)
		END

	IF (EXISTS(
		SELECT 1 
		FROM Courses c
		WHERE 
			c.CourseNumber = @CourseNumber AND
			c.SemesterTerm = @SemesterTerm AND
			c.SemesterYear = @SemesterYear
	))
		BEGIN
			UPDATE Courses
			SET 
				CourseNumber = @CourseNumber,
				SemesterTerm = @SemesterTerm,
				SemesterYear = @SemesterYear
			WHERE CourseNumber = @CourseNumber;
		END
	ELSE
		BEGIN
			PRINT 'Course Not Found';
		END

	SELECT
		s.StudentId,
		s.FirstName,
		s.LastName,
		s.Major,
		c.CourseGuid,
		c.SemesterYear,
		c.SemesterTerm
	FROM 
		Students s
	INNER JOIN CourseStudent cs ON cs.StudentId = s.StudentId
	INNER JOIN Courses c ON c.CourseGuid = cs.CourseGuid
	
END
GO
PRINT N'Creating [dbo].[AddCommentsToReferral]...';


GO
CREATE PROCEDURE [dbo].[AddCommentsToReferral]
	@ReferralId INT,
	@Comments TEXT
AS
BEGIN
	INSERT INTO Referral
		(ReferralId, Comments)
	VALUES
		(@ReferralId, @Comments)

	SELECT
		r.ReferralId,
		r.Comments
	FROM Referral r
	WHERE r.ReferralId = @ReferralId
END
GO
PRINT N'Creating [dbo].[AddReasonForReferral]...';


GO
CREATE PROCEDURE [AddReasonForReferral]
	@ReferralId INT,
	@ReasonId UNIQUEIDENTIFIER,
	@Checked BIT
AS
BEGIN
	INSERT INTO ReferralReason
		(ReferralId, ReasonId, Checked)
	VALUES
		(@ReferralId, @ReasonId, @Checked)

	SELECT
		rr.ReferralId,
		rr.ReasonId,
		r.ReasonName,
		rr.Checked
	FROM ReferralReason rr
		INNER JOIN Reason r ON r.ReasonId = rr.ReasonId
	WHERE rr.ReferralId = @ReferralId
END
GO
PRINT N'Creating [dbo].[AddReferral]...';


GO
CREATE PROCEDURE [dbo].[AddReferral]
	@InstructorId CHAR(6),
	@StudentId CHAR(6),
	@CourseNumber VARCHAR(20),
	@SemesterYear SMALLINT,
	@SemesterTerm CHAR(2),
	@LetterGrade CHAR(2),
	@MeetingRequested BIT
AS
BEGIN
	DECLARE @CourseGuid UNIQUEIDENTIFIER = (
		SELECT c.CourseGuid
		FROM Courses c
		WHERE 
		c.CourseNumber = @CourseNumber AND
		c.SemesterYear = @SemesterYear AND
		c.SemesterTerm = @SemesterTerm
	);

	IF(EXISTS(
		SELECT 1
		FROM CourseStudent cs
			INNER JOIN Courses c ON c.InstructorId = @InstructorId
		WHERE 
			cs.CourseGuid = @CourseGuid AND
			cs.StudentId = @StudentId AND
			c.InstructorId = @InstructorId
	))
	BEGIN
		INSERT INTO Referral
			(InstructorId, StudentId, CourseGuid, LetterGrade, MeetingRequested)
		VALUES
			(@InstructorId, @StudentId, @CourseGuid, @LetterGrade, @MeetingRequested)

		UPDATE Referral 
		SET ReferralDate = GETDATE();
	END
	ELSE
	BEGIN
		PRINT 'Student does not exist in the instructors class';
	END

	SELECT
		r.ReferralId,
		CAST(r.ReferralDate AS DATE),
		CONCAT(i.Firstname, ' ', i.LastName) AS InstructorName,
		CONCAT(s.FirstName, ' ', s.LastName) AS StudentName,
		r.StudentId,
		c.CourseName,
		c.CourseNumber,
		CONCAT(c.SemesterTerm, ' ', c.SemesterYear) AS SemesterTermAndYear,
		s.Major,
		r.LetterGrade,
		r.MeetingRequested,
		r.Comments
	FROM Referral r
		INNER JOIN Students s ON s.StudentId = r.StudentId
		INNER JOIN Instructor i ON i.InstructorId = r.InstructorId
		INNER JOIN CourseStudent cs ON s.StudentId = cs.StudentId
		INNER JOIN Courses c ON c.CourseGuid = cs.CourseGuid
	WHERE 
		r.StudentId = @StudentId AND
		r.InstructorId = @InstructorId AND
		r.CourseGuid = @CourseGuid;
END
GO
PRINT N'Creating [dbo].[AddStudentToCourse]...';


GO
CREATE PROCEDURE [AddStudentToCourse]
	@StudentId CHAR(6),
	@CourseNumber VARCHAR(20),
	@SemesterYear SMALLINT,
	@SemesterTerm CHAR(2)
AS
BEGIN
	INSERT INTO Courses
		(CourseNumber, SemesterYear, SemesterTerm)
	VALUES
		(@CourseNumber, @SemesterYear, @SemesterTerm)
	INSERT INTO Students
		(StudentId)
	VALUES
		(@StudentId)

	SELECT
		cs.StudentId,
		c.CourseNumber
	FROM CourseStudent cs
	INNER JOIN Courses c on cs.CourseGuid = c.CourseGuid
END
GO
PRINT N'Creating [dbo].[FindReferralById]...';


GO
CREATE PROCEDURE [FindReferralById]
	@ReferralId INT
AS
BEGIN
	SELECT
		r.ReferralId,
		r.ReferralDate,
		CONCAT(i.FirstName, ' ', i.LastName) AS InstructorFullName,
		CONCAT(s.FirstName, ' ', s.LastName) AS StudentFullName,
		r.StudentId,
		c.CourseName,
		c.CourseNumber,
		CONCAT(c.SemesterTerm, ' ', c.SemesterYear) AS SemesterTermAndYear,
		s.Major,
		r.LetterGrade,
		r.MeetingRequested,
		r.Comments
	FROM Referral r
		INNER JOIN Instructor i ON i.InstructorId = r.InstructorId
		INNER JOIN Students s ON s.StudentId = r.StudentId
		INNER JOIN CourseStudent cs ON cs.StudentId = s.StudentId
		INNER JOIN Courses c ON c.CourseGuid = cs.CourseGuid
	WHERE r.ReferralId = @ReferralId;
END
GO
PRINT N'Creating [dbo].[FindReferralByStudentId]...';


GO
CREATE PROCEDURE [FindReferralByStudentId]
	@StudentId CHAR(6)
AS
BEGIN
	SELECT
		r.ReferralId,
		r.ReferralDate,
		CONCAT(i.FirstName, ' ', i.LastName) AS InstructorFullName,
		CONCAT(s.FirstName, ' ', s.LastName) AS StudentFullName,
		r.StudentId,
		c.CourseName,
		c.CourseNumber,
		CONCAT(c.SemesterTerm, ' ', c.SemesterYear) AS SemesterTermAndYear,
		s.Major,
		r.LetterGrade,
		r.MeetingRequested,
		r.Comments
	FROM Referral r
		INNER JOIN Instructor i ON i.InstructorId = r.InstructorId
		INNER JOIN Students s ON s.StudentId = r.StudentId
		INNER JOIN CourseStudent cs ON cs.StudentId = s.StudentId
		INNER JOIN Courses c ON c.CourseGuid = cs.CourseGuid
	WHERE s.StudentId = @StudentId
END
GO
PRINT N'Creating [dbo].[FindReferralsByCourseId]...';


GO
CREATE PROCEDURE [FindReferralsByCourseId]
	@CourseNumber VARCHAR(20),
	@SemesterYear SMALLINT,
	@SemesterTerm CHAR(2)
AS
BEGIN
	SELECT
		r.ReferralId,
		r.ReferralDate,
		CONCAT(i.FirstName, ' ', i.LastName) AS InstructorFullName,
		CONCAT(s.FirstName, ' ', s.LastName) AS StudentFullName,
		r.StudentId,
		c.CourseName,
		c.CourseNumber,
		CONCAT(c.SemesterTerm, ' ', c.SemesterYear) AS SemesterTermAndYear,
		s.Major,
		r.LetterGrade,
		r.MeetingRequested,
		r.Comments
	FROM Referral r
		INNER JOIN Instructor i ON i.InstructorId = r.InstructorId
		INNER JOIN Students s ON s.StudentId = r.StudentId
		INNER JOIN CourseStudent cs ON cs.StudentId = s.StudentId
		INNER JOIN Courses c ON c.CourseGuid = cs.CourseGuid
	WHERE c.CourseNumber = @CourseNumber
END
GO
PRINT N'Creating [dbo].[RemoveStudentFromCourse]...';


GO
CREATE PROCEDURE [RemoveStudentFromCourse]
	@StudentId CHAR(6),
	@CourseNumber VARCHAR(20),
	@SemesterYear SMALLINT,
	@SemesterTerm CHAR(2)
AS
BEGIN
	DELETE Students FROM Courses 
	WHERE 
		CourseNumber = @CourseNumber AND
		SemesterYear = @SemesterYear AND
		SemesterTerm = @SemesterTerm AND
		StudentId = @StudentId

	SELECT 
	c.CourseNumber,
	c.CourseName,
	c.InstructorId,
	c.SemesterTerm,
	c.SemesterYear
	FROM Courses c
		INNER JOIN CourseStudent cs ON cs.CourseGuid = c.CourseGuid
	WHERE cs.StudentId = @StudentId
END
GO
PRINT N'Creating [dbo].[SetStudentMajor]...';


GO
CREATE PROCEDURE [SetStudentMajor]
	@StudentId CHAR(6),
	@Major VARCHAR(10)
AS
BEGIN
	UPDATE Students
	SET Major = @Major
	WHERE StudentId = @StudentId

	SELECT s.StudentId, s.Major
	FROM Students s
	WHERE s.StudentId = @StudentId
END
GO
PRINT N'Creating [dbo].[SetStudentName]...';


GO
CREATE PROCEDURE [SetStudentName]
	@StudentId CHAR(6),
	@FirstName NVARCHAR(30),
	@LastName NVARCHAR(30)
AS
BEGIN
	UPDATE Students
	SET FirstName = @FirstName,
		LastName = @LastName
	WHERE StudentId = @StudentId

	SELECT 
		s.StudentId,
		s.FirstName,
		s.LastName
	FROM 
		Students s
	WHERE 
		s.StudentId = @StudentId

END
GO
PRINT N'Update complete.';


GO
