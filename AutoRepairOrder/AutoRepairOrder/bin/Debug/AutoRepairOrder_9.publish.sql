/*
Deployment script for AutoRepairOrder

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AutoRepairOrder"
:setvar DefaultFilePrefix "AutoRepairOrder"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[FK__parts__orderNum__3C69FB99]...';


GO
ALTER TABLE [dbo].[parts] DROP CONSTRAINT [FK__parts__orderNum__3C69FB99];


GO
PRINT N'Starting rebuilding table [dbo].[customers]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_customers] (
    [orderNum]        INT          IDENTITY (1, 1) NOT NULL,
    [custFirstName]   VARCHAR (16) NOT NULL,
    [custLastName]    VARCHAR (16) NOT NULL,
    [custCity]        VARCHAR (16) NOT NULL,
    [custPhoneNumber] VARCHAR (10) NOT NULL,
    [custEmail]       VARCHAR (40) NULL,
    [custAddress]     VARCHAR (40) NULL,
    PRIMARY KEY CLUSTERED ([orderNum] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[customers])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_customers] ON;
        INSERT INTO [dbo].[tmp_ms_xx_customers] ([orderNum], [custFirstName], [custLastName], [custCity], [custPhoneNumber], [custEmail], [custAddress])
        SELECT   [orderNum],
                 [custFirstName],
                 [custLastName],
                 [custCity],
                 [custPhoneNumber],
                 [custEmail],
                 [custAddress]
        FROM     [dbo].[customers]
        ORDER BY [orderNum] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_customers] OFF;
    END

DROP TABLE [dbo].[customers];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_customers]', N'customers';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[employees]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_employees] (
    [orderNum]     INT          NOT NULL,
    [empFirstName] VARCHAR (16) NOT NULL,
    [empLastName]  VARCHAR (16) NOT NULL,
    [empId]        INT          NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[employees])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_employees] ([orderNum], [empFirstName], [empLastName], [empId])
        SELECT [orderNum],
               [empFirstName],
               [empLastName],
               [empId]
        FROM   [dbo].[employees];
    END

DROP TABLE [dbo].[employees];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_employees]', N'employees';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[order_form]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_order_form] (
    [orderNum]     INT          NOT NULL,
    [dateFiled]    DATE         NOT NULL,
    [employeeName] VARCHAR (36) NOT NULL,
    [license]      VARCHAR (10) NOT NULL,
    [year]         CHAR (4)     NOT NULL,
    [make]         VARCHAR (12) NOT NULL,
    [model]        VARCHAR (12) NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[order_form])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_order_form] ([orderNum], [dateFiled], [employeeName], [license], [year], [make], [model])
        SELECT [orderNum],
               [dateFiled],
               [employeeName],
               [license],
               [year],
               [make],
               [model]
        FROM   [dbo].[order_form];
    END

DROP TABLE [dbo].[order_form];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_order_form]', N'order_form';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[labor_details]...';


GO
CREATE TABLE [dbo].[labor_details] (
    [OrderNum]         INT             NOT NULL,
    [partNum]          INT             NOT NULL,
    [costOfParts]      DECIMAL (10, 2) NOT NULL,
    [totalPartCost]    DECIMAL (10, 2) NOT NULL,
    [totalCostOfLabor] DECIMAL (10, 2) NOT NULL,
    [totalCost]        AS              (totalPartCost + totalCostOfLabor),
    [taxAmount]        DECIMAL (10, 2) NOT NULL,
    [grandTotal]       AS              (totalCost + (totalCost * taxAmount))
);


GO
PRINT N'Creating unnamed constraint on [dbo].[employees]...';


GO
ALTER TABLE [dbo].[employees] WITH NOCHECK
    ADD FOREIGN KEY ([orderNum]) REFERENCES [dbo].[customers] ([orderNum]);


GO
PRINT N'Creating unnamed constraint on [dbo].[order_form]...';


GO
ALTER TABLE [dbo].[order_form] WITH NOCHECK
    ADD FOREIGN KEY ([orderNum]) REFERENCES [dbo].[customers] ([orderNum]);


GO
PRINT N'Creating unnamed constraint on [dbo].[labor_details]...';


GO
ALTER TABLE [dbo].[labor_details] WITH NOCHECK
    ADD FOREIGN KEY ([OrderNum]) REFERENCES [dbo].[customers] ([orderNum]);


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts] WITH NOCHECK
    ADD FOREIGN KEY ([orderNum]) REFERENCES [dbo].[customers] ([orderNum]);


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts] WITH NOCHECK
    ADD FOREIGN KEY ([laborId]) REFERENCES [dbo].[labor] ([laborId]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.employees'), OBJECT_ID(N'dbo.order_form'), OBJECT_ID(N'dbo.labor_details'), OBJECT_ID(N'dbo.parts'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
